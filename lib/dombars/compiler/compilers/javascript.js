var Handlebars = require('handlebars');
var JSCompiler = Handlebars.JavaScriptCompiler.prototype;

/**
 * Extends Handlebars JavaScript compiler to add DOM specific rules.
 */
var Compiler = module.exports = function () {};
Compiler.prototype = Handlebars.createFrame(JSCompiler);
Compiler.prototype.compiler    = Compiler;
Compiler.prototype.attrCompiler = require('./attributes');

/**
 * Override name lookup to use the function provided on the DOMBars object.
 *
 * @return {String}
 */
Compiler.prototype.nameLookup = function (parent, name, type) {
  var quotedName = this.quotedString(name);
  var quotedType = this.quotedString(type);
  this.context.aliases.self = 'this';

  return 'self.get(' + parent + ', ' + quotedName + ', ' + quotedType + ')';
};

/**
 * Subscribe to the last subscription on the context stack.
 *
 * @param  {Function} fn
 * @return {String}
 */
Compiler.prototype.subscribe = function (fn) {
  this.context.aliases.self      = 'this';
  this.context.aliases.subscribe = 'this.subscribe';

  this.source.push('self.subscribe(function (value) {' + fn('value') + '});');
};

/**
 * Compiles the environment object generated by the base compiler.
 *
 * @param  {Object}            environment
 * @return {(Function|String)}
 */
Compiler.prototype.compile = function () {
  this.elementSlot       = 0;
  this.subscriptionStack = [];

  return JSCompiler.compile.apply(this, arguments);
};

/**
 * Compile any child program nodes. E.g. Block helpers.
 *
 * @param {Object} environment
 * @param {Object} options
 */
Compiler.prototype.compileChildren = function(environment, options) {
  var children = environment.children;
  var child, Compiler, program, index;

  for (var i = 0, l = children.length; i < l; i++) {
    child    = children[i];
    index    = this.matchExistingProgram(child);
    Compiler = this.compiler;

    if (child.attribute) {
      Compiler = this.attrCompiler;
    }

    if (index == null) {
      this.context.programs.push('');
      child.index = index = this.context.programs.length;
      child.name  = 'program' + index;
      program = new Compiler().compile(child, options, this.context);
      this.context.programs[index]     = program;
      this.context.environments[index] = child;
    } else {
      child.index = index;
      child.name  = 'program' + index;
    }
  }
};

/**
 * Push an element onto the stack and return it.
 *
 * @return {String}
 */
Compiler.prototype.pushElement = function () {
  return 'element' + (++this.elementSlot);
};

/**
 * Pop the last element off the stack and return it.
 *
 * @return {String}
 */
Compiler.prototype.popElement = function () {
  return 'element' + (this.elementSlot--);
};

/**
 * Returns the element at the end of the stack.
 *
 * @return {String}
 */
Compiler.prototype.topElement = function () {
  return 'element' + this.elementSlot;
};

/**
 * Append some content to the buffer (a document fragment).
 *
 * @param  {String} string
 * @return {String}
 */
Compiler.prototype.appendToBuffer = function (string) {
  if (this.environment.isSimple) {
    return 'return ' + string + ';';
  }

  return 'buffer.appendChild(' + string + ');';
};

/**
 * Initialize the base value of the buffer, in this case a document fragment.
 *
 * @return {String}
 */
Compiler.prototype.initializeBuffer = function () {
  return 'document.createDocumentFragment()';
};

/**
 * Merges the source into a stringified output.
 *
 * @return {String}
 */
Compiler.prototype.mergeSource = function () {
  return this.source.join('\n  ');
};

/**
 * Append a variable to the stack. Adds some additional logic to transform the
 * text into a DOM node before we attempt to append it to the buffer.
 */
Compiler.prototype.append = function () {
  this.flushInline();
  var local = this.popStack();

  this.context.aliases.domify = 'this.domifyExpression';

  this.source.push('if (' + local + ' || ' + local + ' === 0) {');
  this.source.push('  ' + this.appendToBuffer('domify(' + local + ')'));
  this.source.push('}');

  if (this.environment.isSimple) {
    this.source.push('else { return ' + this.initializeBuffer() + '; }');
  }
};

/**
 * Append a text node to the buffer.
 *
 * @param {String} content
 */
Compiler.prototype.appendContent = function (content) {
  var string = 'document.createTextNode(' + this.quotedString(content) + ')';
  this.source.push(this.appendToBuffer(string));
};

/**
 * Append a program node to the source.
 */
Compiler.prototype.appendProgram = function () {
  this.source.push(this.appendToBuffer(
    this.popStack() + '(depth' + this.lastContext + ')'
  ));
};

/**
 * Append an escaped Handlebars expression to the source.
 */
Compiler.prototype.appendEscaped = function () {
  this.context.aliases.textify = 'this.textifyExpression';

  this.pushStack('textify(' + this.popStack() + ')');

  var stack = this.topStack();
  this.subscribe(function (value) {
    return stack + '.parentNode.replaceChild' +
      '(textify(' + value +  '), ' + stack + ');';
  });

  this.source.push(this.appendToBuffer(stack));
};

/**
 * Append an element node to the source.
 */
Compiler.prototype.appendElement = function () {
  this.source.push(this.appendToBuffer(this.popStack()));
};

/**
 * Create a DOM comment node ready for appending to the current buffer.
 */
Compiler.prototype.invokeComment = function () {
  this.replaceStack(function (current) {
    var depth = 'depth' + this.lastContext;
    return 'document.createComment(' + current + '(' + depth + '))';
  });
};

/**
 * Create a DOM element node ready for appending to the current buffer.
 */
Compiler.prototype.invokeElement = function () {
  var element = this.pushElement();
  var current = this.popStack();
  var depth   = 'depth' + this.lastContext;

  this.useRegister(element);
  this.source.push(
    element + ' = document.createElement(' + current + '(' + depth + '));'
  );

  this.push(element);
};

/**
 * Append an attribute node to the current element.
 */
Compiler.prototype.invokeAttribute = function () {
  var element = this.topElement();
  var value   = this.popStack();
  var name    = this.popStack();
  var depth   = 'depth' + this.lastContext;

  var params = [name + '(' + depth + ')', value + '(' + depth + ')'];
  this.source.push(element + '.setAttribute(' + params.join(',') + ');');
};

/**
 * Invoke an arbitrary program and append to the current element.
 */
Compiler.prototype.invokeContent = function () {
  var element = this.topElement();
  var depth   = 'depth' + this.lastContext;

  this.useRegister('child');

  // Check that we have a child node before we attempt to append to the DOM.
  this.source.push(
    'child = ' + this.popStack() + '(' + depth + ');',
    'if (child != null) { ' + element + '.appendChild(child); }'
  );
};
